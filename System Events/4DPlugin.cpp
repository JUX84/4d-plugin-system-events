/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : System Events
 #	author : Mehdi Mhiri
 #	18/05/2016
 #
 # --------------------------------------------------------------------------------*/

#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "SystemEventsManager.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
			InitPlugin();
			break;

		case kDeinitPlugin :
			DeinitPlugin();
			break;
            
        case kCloseProcess :
            CloseProcess();
            break;

// --- Sleep

		case 1 :
			sleepSetCallback(pResult, pParams);
			break;

		case 2 :
			sleepRegisterCallback(pResult, pParams);
			break;

		case 3 :
			sleepUnregisterCallback(pResult, pParams);
			break;

		case 4 :
			sleepPrevent(pResult, pParams);
			break;

		case 5 :
			sleepUnprevent(pResult, pParams);
			break;

// --- Wake

		case 6 :
			wakeSetCallback(pResult, pParams);
			break;

		case 7 :
			wakeRegisterCallback(pResult, pParams);
			break;

		case 8 :
			wakeUnregisterCallback(pResult, pParams);
			break;

#if VERSIONWIN
            
// --- Shutdown

		case 9 :
			shutdownSetCallback(pResult, pParams);
			break;

		case 10 :
			shutdownRegisterCallback(pResult, pParams);
			break;

		case 11 :
			shutdownUnregisterCallback(pResult, pParams);
			break;

		case 12 :
			shutdownPrevent(pResult, pParams);
			break;

		case 13 :
			shutdownUnprevent(pResult, pParams);
			break;
#endif
	}
}

void InitPlugin()
{
    SystemEventsManager::init();
}

void DeinitPlugin()
{
    SystemEventsManager::destroy();
}

void CloseProcess()
{
    C_TEXT name;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, 0, 0);
    CUTF16String procName(name.getUTF16StringPtr());
    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
    if (!procName.compare(exitProcName))
        SystemEventsManager::stopCallbackLoop();
}

// ------------------------------------- Sleep ------------------------------------


void sleepSetCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT methodName;

	methodName.fromParamAtIndex(pParams, 1);

	// --- write the code of sleepSetCallback here...
    
    PA_Unichar* name = (PA_Unichar*)methodName.getUTF16StringPtr();
    
    PA_long32 methodID = PA_GetMethodID(name);

    SystemEventsManager::setCallback(SYSTEM_SLEEP, methodID);
}

void sleepRegisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of sleepRegisterCallback here...

    SystemEventsManager::registerCallback(SYSTEM_SLEEP);
}

void sleepUnregisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of sleepUnregisterCallback here...

    SystemEventsManager::unregisterCallback(SYSTEM_SLEEP);
}

void sleepPrevent(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of sleepPrevent here...

    SystemEventsManager::prevent(SYSTEM_SLEEP, true);
}

void sleepUnprevent(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of sleepUnprevent here...

    SystemEventsManager::prevent(SYSTEM_SLEEP, false);
}

// ------------------------------------- Wake -------------------------------------


void wakeSetCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT methodName;

	methodName.fromParamAtIndex(pParams, 1);

	// --- write the code of wakeSetCallback here...
    
    PA_Unichar* name = (PA_Unichar*)methodName.getUTF16StringPtr();
    
    PA_long32 methodID = PA_GetMethodID(name);
    
    SystemEventsManager::setCallback(SYSTEM_WAKE, methodID);
}

void wakeRegisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of wakeRegisterCallback here...

    SystemEventsManager::registerCallback(SYSTEM_WAKE);
}

void wakeUnregisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of wakeUnregisterCallback here...

    SystemEventsManager::unregisterCallback(SYSTEM_WAKE);
}

#if VERSIONWIN

// ----------------------------------- Shutdown -----------------------------------


void shutdownSetCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT methodName;

	methodName.fromParamAtIndex(pParams, 1);

	// --- write the code of shutdownSetCallback here...

    PA_Unichar* name = (PA_Unichar*)methodName.getUTF16StringPtr();
    
    PA_long32 methodID = PA_GetMethodID(name);
    
    SystemEventsManager::setCallback(SYSTEM_SHUTDOWN, methodID);
}

void shutdownRegisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of shutdownRegisterCallback here...

    SystemEventsManager::registerCallback(SYSTEM_SHUTDOWN);
}

void shutdownUnregisterCallback(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of shutdownUnregisterCallback here...

    SystemEventsManager::unregisterCallback(SYSTEM_SHUTDOWN);
}

void shutdownPrevent(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of shutdownPrevent here...

    SystemEventsManager::prevent(SYSTEM_SHUTDOWN, true);
}

void shutdownUnprevent(sLONG_PTR *pResult, PackagePtr pParams)
{
	// --- write the code of shutdownUnprevent here...

    SystemEventsManager::prevent(SYSTEM_SHUTDOWN, false);
}

#endif
